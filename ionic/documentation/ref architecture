Use of reference architectures and frameworks
We are using Ionic framework to implement our mobile application. Ionic framework is a mobile base framework build on the following frameworks:
1. ngCordova – An apache cordova framework which packages html, css and js files in to respective platform such as Android, IOS, Blackberry, Windows mobile etc.
2. AngulaJS – Is a google JavaScript framework that helps implement controllers and services for our project.
3. Bower and Node package manager (NPM) to help install dependencies and plugins into our project in order for us to extend functionalities beyond your normal JS capabilities.
4. UI-Routes – we use routes to changes from one view to the other and from one state to another, this framework help us achieve exactly that.
5. Gulp js – for minifying our project and stripping out all unnecessary comments on our codes so that it can compile faster and respond quicker. Furthermore, the packaged final project file is relatively smaller and making it easy to deploy, share or to store.
6. SASS – this is the framework that deals with the look and feel of our application. SASS is described as css on steroid on the sass website.
Reasons for choosing ionic framework:
1. Since it is a web based, it leverages our web development skills and the knowledge we have of the web based languages such as js, html and css.
2. It is cross platform, one project will be deployed on every platform. Meaning we do not need to write special code to accommodate a specific platform or learn the native language that each platform uses. This speeds up production and is convenient since we can not assume that users will be using one specific platform.
3. It is pretty powerful. We use ngCordova’s plugins to access native device camera, video camera, audio recording, media file, local storage etc… All this is done effortless.
4. Our app has to access one’s geolocation and it is relatively easy to that with ionic than will a native language.
5. Is easy to implement security features in javascript
6. Is easier to debug, you can also debug in a browser’s console.
7. It uses less resources, you do not need an emulator to test features such as geolocation or encryption
8. There are many encryption js libraries. For example forgejs, cryptojs and they both implement AES cryptography.
9. It’s easy to work with JSON object.
10. It has a great community and up to date plugins.
