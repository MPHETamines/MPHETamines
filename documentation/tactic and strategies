Architectural tactics or strategies
1. Design Patterns
Since our system is security based, we will be using Strategy design pattern to allow client to choose from different types of encryption algorithms so that the client can encrypt the pde in a way that suits his/her need.
We also use factory design pattern to create different types of encryption/decryption methods. All the encryption/decryption methods will behave differently and differ in a way the algorithm is implemented.
2. Architectural Patterns
Model view controller: Ionic framework is build from this pattern, where the view is the templated html pages, the model is the json object to and from the firebase database and the controller is the javascript functions to implement the system's functionality.
Pipes and Filters: We will be tagging images, videos and audio files being uploaded to the firebase and using this design pattern to allow us to easily search and filter by tags and categorize the pde being uploaded.

 Architectural tactics or strategies
1. Design Patterns
Since our system is security based, we will be using Strategy design pattern to allow client to choose from different types of encryption algorithms so that the client can encrypt the pde in a way that suits his/her need.
We also use factory design pattern to create different types of encryption/decryption methods. All the encryption/decryption methods will behave differently and differ in a way the algorithm is implemented.
2. Architectural Patterns
Model view controller: Ionic framework is build from this pattern, where the view is the templated html pages, the model is the json object to and from the firebase database and the controller is the javascript functions to implement the system's functionality.
Pipes and Filters: We will be tagging images, videos and audio files being uploaded to the firebase and using this design pattern to allow us to easily search and filter by tags and categorize the pde being uploaded.
3. Tactics
Security: We do not catche user credentials nor keep them in history. This forces users to login everytime they need to login to the our system.  Users have a limited amout of tries to login. 
Maintainability: Our views are templated, seperating the view from the templates. Since our system relies on AngulaJS, we inject dependencies and as such the is Inversion of control (IoC).
Perfomance: We catche users's retried pde so that the system can respomd faster especially on slow internet connection. Firebase DB also caches data in case the DB goes down and once it goes up again, it sychronizes the catched data with the data in the DB.
Scalability: We decouple the client from the serve and only have a handle to the firebase serve in a form of a link and connecting to its API, this is possible through a RESTful API.
We use local storage to store any pde that the user chooses to upload later in case the user did not have internet connection at the time the pde was captured.
Reliability and Availability: caching and local storage as explained above.
Auditability - Users login before they can upload a pde
	- We use date, timestamps and geolocation
	- Data that is send to and from the serve is encrypted
Testing: we will implement unit testing and itegration tests to see if the pre and post condition are/were met.
Usability: We use nice icon and buttons and less text and incourages users who can not read to be able to use our system. Since it is a web base, we develop our system in away that blind and visual impaired users will be able to use screen readers to access our services.
Integrability: Our system is intergratable since it is decoupled form the cloud/database, it can work with any database or a cloud for that matters or simply a local storage. 
Deployability: The system is cross platform, it will be deployable on IOS, Android, Windows, Amazon and blackberry platforms
	
